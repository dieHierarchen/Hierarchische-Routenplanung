/**
 * @author Robin.Schneider
 */

package UnitTests;

import Logic.*;
import java.util.ArrayList;

import org.junit.*;

import Graph.Graph;
import Graph.Node;

public class UnitTestDijkstra {
	
	Logic.DijkstraAlgorithm DijkstraAlgo;
	private Graph testGraph;
	
	@Before
	public void setpUp() {
		
		//setting up a test graph
		Graph testGraph = new Graph();
				
		testGraph = new Graph();
		testGraph.addNode("8", 8, 10.178306,47.270111);
		testGraph.addNode("7", 7, 6.5, 48.4);
		testGraph.addNode("5", 5, 15.0411870, 52.274632);
		testGraph.addNode("4", 4, 9.9, 49.6);
		testGraph.addNode("3", 3, 5.866867, 51.05155);
		testGraph.addNode("2", 2, 10.3777, 51.456776);
		testGraph.addNode("1", 1, 8.415789, 55.057728);
		testGraph.addNode("9",9, 10.2, 48);
				
//		//adding edges:
				
		testGraph.addEdge(1,3);
		testGraph.addEdge(1,2);
		testGraph.addEdge(3,4);
		testGraph.addEdge(2,4);
		testGraph.addEdge(2,8);
		testGraph.addEdge(2,5);
		testGraph.addEdge(4,7);
		testGraph.addEdge(5,9);
		testGraph.addEdge(7,8);
		testGraph.addEdge(8,9);
		

		
		//calculate shortest way from node 1 to node 8:
		Node start = testGraph.getNode(1);
		Node aim = testGraph.getNode(8);
		DijkstraAlgo = new DijkstraAlgorithm(start, aim, testGraph);
		DijkstraAlgo.startAlgorithm();
		
	}
	
	@Test
	public void AssertShortestDistance() {
		double shortestDistance = DijkstraAlgo.getMinDistance();
		Assert.assertTrue(shortestDistance == 21);
	}
	
	@Test
	public void AssertCorrectPath() {
		
		ArrayList<Node> result = DijkstraAlgo.getResultList();
		
		//Assert:
		Assert.assertTrue(result.get(0).getLabel() == "1");
		Assert.assertTrue(result.get(1).getLabel() == "2");
		Assert.assertTrue(result.get(2).getLabel() == "4");
		Assert.assertTrue(result.get(3).getLabel() == "7");
		Assert.assertTrue(result.get(4).getLabel() == "8");
	}
	
	@Test
	public void AssertGraphTest() {
		Node start = testGraph.getNode(2);
		Node aim = testGraph.getNode(8);
		Assert.assertTrue(testGraph.getEdgeWeight(start.getId(), aim.getId()) == 25);
		Assert.assertTrue(testGraph.getEdgeWeight(100, aim.getId()) == -1);
	}
	
}
