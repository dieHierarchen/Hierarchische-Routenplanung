/**
 * @author Robin.Schneider
 */

package UnitTests;

import Logic.*;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.*;

import Graph.Graph;
import Graph.Node;

public class UnitTestDijkstra {
	
	Logic.DijkstraAlgorithm DijkstraAlgo;
	private Graph testGraph;
	
	@Before
	public void setpUp() {
		//setting up a testing graph
//		testGraph = new int[10][10];
//		for (int i = 0; i < testGraph.length; i++) {
//			for (int k = 0; k < testGraph.length; k++) {			//initial =0
//				testGraph[i][k] = 0;
//			}
//		}
		
		testGraph = new Graph();
		testGraph.addNode("1");
		testGraph.addNode("2");
		testGraph.addNode("3");
		testGraph.addNode("4");
		testGraph.addNode("5");
		testGraph.addNode("6");
		testGraph.addNode("7");
		testGraph.addNode("8");
		testGraph.addNode("9");
		
		//adding edges:
		
		testGraph.addEdge("1", "3", 5);
		testGraph.addEdge("1", "2", 6);
		testGraph.addEdge("3", "4", 7);
		testGraph.addEdge("2", "4", 3);
		testGraph.addEdge("2", "8", 25);
		testGraph.addEdge("2", "5", 10);
		testGraph.addEdge("4", "7", 4);
		testGraph.addEdge("5", "9", 3);
		testGraph.addEdge("7", "8", 8);
		testGraph.addEdge("8", "9", 3);
		
//		testGraph[1][3] = 5;
//		testGraph[1][2] = 6;
//		
//		testGraph[2][1] = 6;
//		testGraph[2][4] = 3;
//		testGraph[2][8] = 25;
//		testGraph[2][5] = 10;
//		
//		testGraph[3][1] = 5;
//		testGraph[3][4] = 7;
//		
//		testGraph[4][2] = 3;
//		testGraph[4][7] = 4;
//		
//		testGraph[5][2] = 10;
//		testGraph[5][9] = 3;
//		
//		testGraph[7][4] = 4;
//		testGraph[7][8] = 8;
//		
//		testGraph[8][7] = 8;
//		testGraph[8][2] = 25;
//		testGraph[8][9] = 3;
//		
//		testGraph[9][5] = 3;
//		testGraph[9][8] = 3;
		
		//calculate shortest way from node 1 to node 8:
//		DijkstraAlgo = new DijkstraAlgorithm(1, 8, testGraph);
//		DijkstraAlgo.startAlgorithm();
		
	}
	
//	@Test
//	public void AssertShortestDistance() {
//		int shortestDistance = DijkstraAlgo.getMinDistance();
//		Assert.assertTrue(shortestDistance == 21);
//	}
//	
//	@Test
//	public void AssertCorrectPath() {
//		
//		ArrayList<Integer> result = DijkstraAlgo.getResultList();
//		
//		//Assert:
//		Assert.assertTrue(result.get(0) == 1);
//		Assert.assertTrue(result.get(1) == 2);
//		Assert.assertTrue(result.get(2) == 4);
//		Assert.assertTrue(result.get(3) == 7);
//		Assert.assertTrue(result.get(4) == 8);
//	}
	@Test
	private void AssertGraphTest() {
		testGraph.printNodesAndEdges();
		Node start = testGraph.getNode("2");
		Node aim = testGraph.getNode("8");
		Node noEdge = testGraph.getNode("6");
		Assert.assertTrue(testGraph.getEdgeWeight(start, aim) == 25);
		Assert.assertTrue(testGraph.getEdgeWeight(noEdge, aim) == -1);
	}
	
}
