/**
 * @author Robin.Schneider
 */

package UnitTests;

import Logic.*;
import java.util.ArrayList;

import org.junit.*;

import Graph.Graph;
import Graph.Node;

public class UnitTestDijkstra {
	
	Logic.DijkstraAlgorithm DijkstraAlgo;
	private Graph testGraph;
	
	@Before
	public void setpUp() {
		
		//setting up a test graph
		Graph testGraph = new Graph();
				
		testGraph = new Graph();
		testGraph.addNode("1", 1, 8.415789, 55.057728);
		testGraph.addNode("2", 2, 8, 54.456776);
		testGraph.addNode("3", 3, 10.3777, 51.456776);
		testGraph.addNode("6", 6, 5.9, 50.6);
		testGraph.addNode("5", 5, 15.0411870, 50.6);
		testGraph.addNode("8", 8, 10.178306,47.270111);
		testGraph.addNode("10", 10, 10.3345, 11.50);
		testGraph.addNode("20", 20, 10.178306, 50);
				
//		//adding edges:
				
		testGraph.addEdge(1,2);
		testGraph.addEdge(2,3);
		testGraph.addEdge(3,6);
		testGraph.addEdge(6,5);
		testGraph.addEdge(1,8);
		testGraph.addEdge(8,5);
		
		testGraph.addEdge(1,10);
		testGraph.addEdge(3,20);

		

		
		//calculate shortest way from node 1 to node 8:
		Node start = testGraph.getNode(1);
		Node aim = testGraph.getNode(5);
		DijkstraAlgo = new DijkstraAlgorithm(start, aim, testGraph);
		DijkstraAlgo.startAlgorithm();
		
	}
	
//	@Test
//	public void AssertShortestDistance() {
//		double shortestDistance = DijkstraAlgo.getMinDistance();
//		Assert.assertTrue(shortestDistance == 21);
//	}
	
	@Test
	public void AssertCorrectPath() {
		
		ArrayList<Node> result = DijkstraAlgo.getResultList();
		
		//Assert:
//		Assert.assertTrue(result.get(0).getLabel() == "1");
//		Assert.assertTrue(result.get(1).getLabel() == "2");
//		Assert.assertTrue(result.get(2).getLabel() == "3");
//		Assert.assertTrue(result.get(3).getLabel() == "6");
//		Assert.assertTrue(result.get(4).getLabel() == "5");
	}

	
}
