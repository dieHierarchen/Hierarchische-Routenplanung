import java.awt.List;
import java.util.ArrayList;
import java.util.Map.Entry;

import org.w3c.dom.Element;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;

public class XmlNodeParser extends DefaultHandler {
	private AttributesImpl attributes = new AttributesImpl();
	private ElementContent elements;
	protected Graph graph;
	
	public XmlNodeParser(Graph graph) {
		this.graph = graph;
	}
	
	public void endDocument() {
	}
	
	protected class ElementContent{
		private String qName;
		private AttributesImpl attributes;
		private ArrayList<ElementContent> children = new ArrayList<ElementContent>();
		
		public ElementContent(String qName, AttributesImpl attributes) {
			this.qName = qName;
			this.attributes = attributes;
		}
		
		public void addChild(ElementContent element) {
			children.add(element);
		}
		
		public AttributePair getAttributePair() {
			String key = "";
			String value = "";
			for(int i = 0; i<attributes.getLength(); i++) {
				//System.out.println("k= " + attributes.getQName(i) + " v= " + attributes.getValue(i));
				if(attributes.getQName(i).contains("k")) {
					key = attributes.getValue(i);
				}else if (attributes.getQName(i).contains("v")) {
					value = attributes.getValue(i);
				}
			}
			return new AttributePair(key,value);
		}
		
		public void elementIsReady() {
			int id = 0;
			String name = "";
			float lon = 0;
			float lat = 0;
			
			for(ElementContent child:children) {
				AttributePair pair = child.getAttributePair();
				//System.out.println("k= " + pair.key + " v= " + pair.value);
				if (pair.key.contains("name")) {
					name = pair.value;
				} else if (pair.key.contains("LocationCode")) {
					id = Integer.parseInt(pair.value);
				}
			}
			
			for(int i = 0; i<attributes.getLength(); i++) {
				switch(attributes.getQName(i)) {
				case "lon":
					lon = Float.parseFloat(attributes.getValue(i));
				case "lat":
					lat = Float.parseFloat(attributes.getValue(i));
				}
			}
			
			graph.addNode(name, id, lon, lat);
		}
	}
	
	protected class AttributePair{
		public String value;
		public String key;
		public AttributePair(String key, String value) {
			this.value = value;
			this.key = key;
		}
	}

	
	public void startElement(String nameSpaceURI, String localName, String qName, Attributes atts) {
		if (qName == "node" || qName == "way" || qName == "relation") {
			if(elements != null) {
				elements.elementIsReady();
			}
			
			attributes = new AttributesImpl();
			for (int i = 0; i < atts.getLength(); i++) {
				attributes.addAttribute("", "", atts.getQName(i), "", atts.getValue(i));
			}
			elements = new ElementContent(qName, attributes);
		} else {
			attributes = new AttributesImpl();
			for (int i = 0; i < atts.getLength(); i++) {
				System.out.println("k= " + atts.getQName(i) + " v= " + atts.getValue(i));
				attributes.addAttribute("", "", atts.getQName(i), "", atts.getValue(i));
			}
			
			if(elements != null) {
				elements.addChild(new ElementContent(qName, attributes));
			}
		}
	}
	
	public void endElement(String namespaceUI, String localName, String qName) {

	}
	
	public void characters(char[] ch, int start, int length) {
		
	}
}
