package Graph;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Node implements Comparable<Node>{
<<<<<<< HEAD

	private String label;
	private int id;
	private double lon;
	private double lat;
	private ArrayList<Edge> adjazenzList;

	public Node(String label, int id, double lon, double lat) {

		this.label = label;
=======
	private String id;
	private double lon;
	private double lat;
	private ArrayList<Edge> adjazenzList;
	
	private double gCost;
	private double fCost;
	private Node predecessor;

	public Node(String id, double lon, double lat) {
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
		this.id = id;
		this.lon = lon;
		this.lat = lat;
		adjazenzList = new ArrayList<Edge>();
	}
<<<<<<< HEAD

	
	/* Adds edge to the current node */

	public void addEdge(Edge e) throws IllegalArgumentException {

		if (adjazenzList.contains(e)) {
			throw new IllegalArgumentException("The edge is already existing");
		}
		else {
			adjazenzList.add(e);
		}
	}
	

	/* Deletes edge from adjacencylist of the current node */
=======
	
	public void setGCost(double gCost) {
		this.gCost = gCost;
	}
	
	public double getGCost() {
		return gCost;
	}
	
	public void setFCost(double fCost) {
		this.fCost = fCost;
	}
	
	public double getFCost() {
		return fCost;
	}
	
	public Node getPredecessor() {
		return predecessor;
	}
	
	public void setPredecessor(Node predecessor) {
		this.predecessor = predecessor;
	}

	/* Fügt Knoten eine Kante hinzu */

	public void addEdge(Edge e) {

		if (!adjazenzList.contains(e)) {

			adjazenzList.add(e);
		}
	}

	/* Löscht Kante aus Adjazenzliste eines Knotens */
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f

	public void removeEdge(Edge e) throws NoSuchElementException {

		if (adjazenzList.contains(e)) {
<<<<<<< HEAD
=======

>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
			adjazenzList.remove(e);
			Node tmp = e.getAim();
			Iterator<Edge> i = tmp.adjazenzList.iterator();
			while (i.hasNext()) {
				if (i.next().getAim() == e.getStart()) {
					i.remove();
				}
<<<<<<< HEAD
			}
		}
		else{
			throw new NoSuchElementException("Choosen edge is not existing");
=======

			}
		}

		else

		{
			throw new NoSuchElementException("Kante existiert nicht");
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
		}

	}

<<<<<<< HEAD
	
	/* Deletes every edge with the choosen node in the graph */
=======
	/* Löscht sämtliche Kanten von und zu dem Zielknoten */
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f

	public void deleteAllEdges(Node n) {
		Edge currentEdge;
		Node targetNode;
		ArrayList<Edge> allEdges = getAllEdges(n);
		for (int i = 0; i < allEdges.size(); i++) {
			currentEdge = (Edge) allEdges.get(i);
			targetNode = currentEdge.getAim();
			targetNode.removeEdge(currentEdge);
		}
	}
	
<<<<<<< HEAD
	
	/* Returns list of all neighbours */
=======
	/* Gibt Liste aller Nachbarn zurück */
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f

	public ArrayList<Node> getNeighbours()
	{
		ArrayList<Node> allNeighbours = new ArrayList<Node>();
		Iterator<Edge> i = this.getAdjazenzList().iterator();
		while(i.hasNext())
		{
			allNeighbours.add(i.next().getAim());
		}

		return allNeighbours;
	}
	
<<<<<<< HEAD
	
	/* Calculates weight of the edge between nodes in kilometers */
=======
	/* Berechnet Distanz zu anderem Knoten in Kilometern */
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
	
	public double getDistance(Node aim)
	{
		final int R = 6371;
<<<<<<< HEAD
		double distanceLat = Math.toRadians(aim.getLat() - this.getLat());
=======
 		double distanceLat = Math.toRadians(aim.getLat() - this.getLat());
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
		double distanceLon = Math.toRadians(aim.getLon() - this.getLon());
		double x = Math.sin(distanceLat / 2) * Math.sin(distanceLat / 2)
				   + Math.cos(Math.toRadians(this.getLat())) * Math.cos(Math.toRadians(aim.getLat()))
				   * Math.sin(distanceLon / 2) * Math.sin(distanceLon / 2);
		double y = 2 * Math.atan2(Math.sqrt(x), Math.sqrt(1 - x));
		double distance = R * y;
		
		return distance;
		
	}
<<<<<<< HEAD
	
	
	/* Compares two nodes with each other */ 
	
	@Override
	public int compareTo(Node o) {
		return this.getLabel().compareTo(o.getLabel());
	}
=======
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f

	public ArrayList<Edge> getAllEdges(Node n) {
		return n.adjazenzList;
	}
	
	public String getLabel() {
<<<<<<< HEAD
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
=======
		return id;
	}

	public void setLabel(String label) {
		this.id = label;
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
	}

	public ArrayList<Edge> getAdjazenzList() {
		return adjazenzList;
	}

	public void setAdjazenzList(ArrayList<Edge> adjazenzList) {
		this.adjazenzList = adjazenzList;
	}

<<<<<<< HEAD
	public int getId() {
		return id;
	}

	public void setId(int id) {
=======
	@Override
	public int compareTo(Node o) {
		return this.getLabel().compareTo(o.getLabel());
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
>>>>>>> dbc7c8d0466e83439b29caa66db47c9e42f6c61f
		this.id = id;
	}

	public double getLon() {
		return lon;
	}

	public void setLon(double lon) {
		this.lon = lon;
	}

	public double getLat() {
		return lat;
	}

	public void setLat(double lat) {
		this.lat = lat;
	}
}
