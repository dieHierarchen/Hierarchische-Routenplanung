package Logic;

import Graph.Edge;
import Graph.Graph;
import Graph.Node;

import static org.junit.jupiter.api.Assumptions.assumingThat;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;

public class AStarAlgorithm implements ShortestPathAlgorithm {
	private Node startingNode;
	private Node finalNode;
	private Graph graph;
	private PriorityQueue<Node> openList = new PriorityQueue<Node>();
	private List<Node> closedList = new LinkedList<Node>();
	
	private ArrayList<Node> resultList;
	
	public AStarAlgorithm(Node startingNode, Node finalNode, Graph graph) {
		this.startingNode = startingNode;
		this.finalNode = finalNode;
		this.graph = graph;
	}
	
	public void startAlgorithm() {
		resultList = (ArrayList<Node>) search(startingNode, finalNode);
		System.out.println("done");
	}
	
	private double estimateCost(Node node, Node target) {
		double dx = node.getLon() - target.getLon();
		double dy = node.getLat() - target.getLat();
		return Math.sqrt(dx * dx + dy * dy);
	}
	
	@Override
	public ArrayList<Node> getResultList() {
		return resultList;
	}
	
	private List<Node> reconstructPath(Node node){
		List<Node> path = new LinkedList<Node>();
		path.add(node);
		while (node.getPredecessor() != null) {
			node = node.getPredecessor();
			path.add(node);
		}
		return path;
	}
	
	private List<Node> search(Node fromNode, Node toNode){
		openList.offer(fromNode);
		
		while(!openList.isEmpty()) {
			System.out.println("xx");
			Node node = openList.poll();
			closedList.add(node);
			if (node.getLabel() == toNode.getLabel()) {
				return reconstructPath(node);
			}
			for (Edge edge: node.getAdjazenzList()) {
				Node succ = edge.getAim();
				if (closedList.contains(succ)){
					continue;
				}
				Edge edgeToSucc = null;
				for (Edge e: node.getAdjazenzList()) {
					if (e.getAim() == succ) {
						edgeToSucc = e;
						break;
					}
				}
				double tf = node.getGCost() + edgeToSucc.getWeight() + estimateCost(succ, toNode);
				if (openList.contains(succ) && tf > succ.getFCost()) {
					continue;
				}
				
				succ.setPredecessor(node);
				succ.setGCost(tf);
				succ.setFCost(node.getGCost() + edgeToSucc.getWeight());
				if(openList.contains(succ)) {
					openList.remove(succ);
				}
				openList.offer(succ);
			}
		}
		System.out.println("null");
		return null;
	}

	@Override
	public double getMinDistance() {
		int size = resultList.size();
		if (size > 0) {
			return estimateCost(resultList.get(0), resultList.get(size - 1));
		}
		return 0;
	}
}
